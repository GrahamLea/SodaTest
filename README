SodaTest: Spreadsheet-Driven Integration Testing

SodaTest is a framework for Integration and Acceptance testing.

The input format is CSV files, the output format is pretty HTML, and the programming model in between for creating
fixtures is kept as simple as possible.


MOTIVATION

SodaTest is intended as an alternative to FIT. It is a framework that allows the creation of executable test cases in a
format that is easily readable by non-programmers, with the goal of being easily understood, edited or even authored by
the non-technical Customers of the software under test.

The core design of SodaTest focusses around resolving a number of niggles experienced with FIT over the years, namely:
* HTML as an input format is annoying for developers to manage
* HTML as an input format prevents Customers from getting involved in test writing
* The API is too flexible, bringing the developer too close to the input format and making poor practices possible
* The depth of the ecosystem of FIT, fitlibrary and Fitnesse confuses developers trying to achieve something simple
* Mixing classes from across the fractured ecosystem results in unresolvable classpath errors
* Formatting test output based on the input formatting results in ugly and inconsistent test output

In order to resolve the input format problems, spreadsheets were chosen (in the form of CSV files, at present) due to
spreadsheets being "the language of business" (not accounting, as some would have you think.) The simplicity of
creating spreadsheets on any platform sealed the deal. This key differentiation was the motivation for the name choice:
Spreadsheet-Driven Integration Testing => S-D Test => SodaTest

Good ideas froms FIT which are maintained in SodaTest are:
* Using reflection to automate a lot of string-conversion boilerplate for the fixture author
* HTML as an excellent format for test output

Other things that SodaTest tries to achieve are:
* A separation between Events, which cause side-effects within the System, and Reports, which merely query the state of
  the System.
* Powerful and flexible (yet simple!) coercion of strings to strong types, including support for PropertyEditors
* Simple and localised control of Report formatting from strong types to strings
* Case-agnosticism when binding input strings to programmattic symbols


PROJECT SECTIONS

The SodaTest project is made up of 3 modules at present:

* 'SodaTest API' is the only module on which your test code should depend at compile-time.
  The org.sodatest.api package contains the traits to be implemented in order to implement fixtures.

* 'SodaTest Runtime' contains applications that can be used to execute SodaTests.
  The SodaFolderRunner class in the org.sodatest.runtime.processing.running is currently the main
  entry point for running tests.

* 'SodaTest Examples' contains examples of how to use different features of SodaTest


TASKS ON THE ROADMAP

The project is definitely in its infantile stages.
These are the things that make the most sense to achieve in the near future, listed in rough priority order.

* Move Coercion into its own Module
* Rename everything about 'Action's to 'Event'
* FolderRunner argument checking and usage advice
* FolderRunner output an index page
* Note blocks
* Support for automatic formatting of report output to strings
* More appropriate logging level out of the box
* Listeners for catching the start+end of multiple-execution actions (e.g. writing a  multi-line file)
* Parsing errors commuted to output
* Shortcut for single-parameter blocks (Report, <reportName>, <parameterValue>)
* Java example
* JUnit integration & example
* Spring integration & example
* Maven plugin


Copyright (c) 2011 Belmont Technology Pty Ltd. All rights reserved.
